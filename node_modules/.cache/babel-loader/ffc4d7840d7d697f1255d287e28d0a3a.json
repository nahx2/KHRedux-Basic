{"ast":null,"code":"// Action (액션)\nexport const increase = mem_name => ({\n  type: \"INCREASE\",\n  payload: mem_name\n});\nexport const decrease = empVO => ({\n  type: \"DECREASE\",\n  payload: empVO\n});\nexport const reset = () => ({\n  type: \"RESET\"\n});\nexport const deptlist = depts => ({\n  type: \"DEPTLIST\",\n  payload: depts\n});\nexport const initAuth = (firebaseAuth, googleProvider) => ({\n  type: \"INIT_AUTH\",\n  firebaseAuth: firebaseAuth,\n  googleProvider: googleProvider\n});\n\n// 초기 상태 만들기 - 무엇을 관리하지?\nconst initstate = {\n  number: 0,\n  mem_name: \"guest\",\n  empVO: {\n    empno: 1000,\n    ename: \"ㅍ\"\n  },\n  depts: [{\n    DEPTNO: 10,\n    DNAME: \"총무부\",\n    LOC: \"서울\"\n  }, {\n    DEPTNO: 20,\n    DNAME: \"개발부\",\n    LOC: \"제주\"\n  }, {\n    DEPTNO: 30,\n    DNAME: \"인사부\",\n    LOC: \"울릉도\"\n  }],\n  firebaseAuth: \"\",\n  googleProvider: \"\"\n};\n\n// Reducer(액션의 타입에 따라 원하는 처리를 함)\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"INCREASE\":\n      return {\n        number: state.number + 1,\n        mem_name: action.payload\n      };\n    case \"DECREASE\":\n      return {\n        number: state.number - 1,\n        empVO: action.payload\n      };\n    case \"RESET\":\n      return {\n        number: 0\n      };\n    case \"DEPTLIST\":\n      return {\n        depts: action.payload\n      };\n    case \"INIT_AUTH\":\n      return {\n        ...state,\n        firebaseAuth: action.firebaseAuth,\n        googleProvider: action.googleProvider\n      };\n    default:\n      return {\n        ...state\n      };\n    // 특정한 타입이 존재하지 않으면 초기상태 정보를 얕은 복사로 내보냄\n  }\n};\n\nexport default reducer;","map":{"version":3,"names":["increase","mem_name","type","payload","decrease","empVO","reset","deptlist","depts","initAuth","firebaseAuth","googleProvider","initstate","number","empno","ename","DEPTNO","DNAME","LOC","reducer","state","action"],"sources":["C:/git_java20220415/Redux-Basic/src/store.js"],"sourcesContent":["// Action (액션)\r\nexport const increase = (mem_name) => ({ type: \"INCREASE\", payload: mem_name });\r\nexport const decrease = (empVO) => ({ type: \"DECREASE\", payload: empVO });\r\nexport const reset = () => ({ type: \"RESET\" });\r\nexport const deptlist = (depts) => ({ type: \"DEPTLIST\", payload: depts });\r\nexport const initAuth = (firebaseAuth, googleProvider) => ({\r\n  type: \"INIT_AUTH\",\r\n  firebaseAuth: firebaseAuth,\r\n  googleProvider: googleProvider,\r\n});\r\n\r\n// 초기 상태 만들기 - 무엇을 관리하지?\r\nconst initstate = {\r\n  number: 0,\r\n  mem_name: \"guest\",\r\n  empVO: { empno: 1000, ename: \"ㅍ\" },\r\n  depts: [\r\n    { DEPTNO: 10, DNAME: \"총무부\", LOC: \"서울\" },\r\n    { DEPTNO: 20, DNAME: \"개발부\", LOC: \"제주\" },\r\n    { DEPTNO: 30, DNAME: \"인사부\", LOC: \"울릉도\" },\r\n  ],\r\n  firebaseAuth: \"\",\r\n  googleProvider: \"\",\r\n};\r\n\r\n// Reducer(액션의 타입에 따라 원하는 처리를 함)\r\nconst reducer = (state = initstate, action) => {\r\n  switch (action.type) {\r\n    case \"INCREASE\":\r\n      return { number: state.number + 1, mem_name: action.payload };\r\n    case \"DECREASE\":\r\n      return { number: state.number - 1, empVO: action.payload };\r\n    case \"RESET\":\r\n      return { number: 0 };\r\n    case \"DEPTLIST\":\r\n      return { depts: action.payload };\r\n    case \"INIT_AUTH\":\r\n      return {\r\n        ...state,\r\n        firebaseAuth: action.firebaseAuth,\r\n        googleProvider: action.googleProvider,\r\n      };\r\n    default:\r\n      return { ...state }; // 특정한 타입이 존재하지 않으면 초기상태 정보를 얕은 복사로 내보냄\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n    "],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAIC,QAAQ,KAAM;EAAEC,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAEF;AAAS,CAAC,CAAC;AAC/E,OAAO,MAAMG,QAAQ,GAAIC,KAAK,KAAM;EAAEH,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAEE;AAAM,CAAC,CAAC;AACzE,OAAO,MAAMC,KAAK,GAAG,OAAO;EAAEJ,IAAI,EAAE;AAAQ,CAAC,CAAC;AAC9C,OAAO,MAAMK,QAAQ,GAAIC,KAAK,KAAM;EAAEN,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAEK;AAAM,CAAC,CAAC;AACzE,OAAO,MAAMC,QAAQ,GAAG,CAACC,YAAY,EAAEC,cAAc,MAAM;EACzDT,IAAI,EAAE,WAAW;EACjBQ,YAAY,EAAEA,YAAY;EAC1BC,cAAc,EAAEA;AAClB,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,CAAC;EACTZ,QAAQ,EAAE,OAAO;EACjBI,KAAK,EAAE;IAAES,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAI,CAAC;EAClCP,KAAK,EAAE,CACL;IAAEQ,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAK,CAAC,EACvC;IAAEF,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAK,CAAC,EACvC;IAAEF,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAM,CAAC,CACzC;EACDR,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE;AAClB,CAAC;;AAED;AACA,MAAMQ,OAAO,GAAG,YAA+B;EAAA,IAA9BC,KAAK,uEAAGR,SAAS;EAAA,IAAES,MAAM;EACxC,QAAQA,MAAM,CAACnB,IAAI;IACjB,KAAK,UAAU;MACb,OAAO;QAAEW,MAAM,EAAEO,KAAK,CAACP,MAAM,GAAG,CAAC;QAAEZ,QAAQ,EAAEoB,MAAM,CAAClB;MAAQ,CAAC;IAC/D,KAAK,UAAU;MACb,OAAO;QAAEU,MAAM,EAAEO,KAAK,CAACP,MAAM,GAAG,CAAC;QAAER,KAAK,EAAEgB,MAAM,CAAClB;MAAQ,CAAC;IAC5D,KAAK,OAAO;MACV,OAAO;QAAEU,MAAM,EAAE;MAAE,CAAC;IACtB,KAAK,UAAU;MACb,OAAO;QAAEL,KAAK,EAAEa,MAAM,CAAClB;MAAQ,CAAC;IAClC,KAAK,WAAW;MACd,OAAO;QACL,GAAGiB,KAAK;QACRV,YAAY,EAAEW,MAAM,CAACX,YAAY;QACjCC,cAAc,EAAEU,MAAM,CAACV;MACzB,CAAC;IACH;MACE,OAAO;QAAE,GAAGS;MAAM,CAAC;IAAE;EAAA;AAE3B,CAAC;;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}